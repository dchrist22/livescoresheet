var autoReload = true;

init();
var lifters = undefined;
var lastDiscipline = "";
var allDisciplines = #{toJSON discNames};
var juryLifter = undefined;
var juryCards  = undefined;

function toggleAutoReload () {
  if (autoReload) {
    autoReload = false;
  } else {
    autoReload = true;
    // update the ui to show all missed updates
    showNextLifters(lifters[1]);
    showRanking(lifters[0]);
  }
}

function init() {
  var url = document.URL;
  url = url.replace("http:", "ws:").replace("https:", "wss:");
  var socket = new WebSocket(url);

  socket.onmessage = function (e) {
    var data = JSON.parse(e.data);
    console.log("success;");
    if (data[0] == "SheetData") {
      data = data[1];
      lifters = data;
      console.log("SheetData");
      if (autoReload) {
        showNextLifters(data[1]);
        showRanking(data[0]);
        updateCheckboxes(data[2], allDisciplines);
        showSelectedDisciplines();
      }
    } else if (data[0] == "JuryData") {
        console.log ("juryData")
        juryLifter = data[1];
        juryCards  = data[2];
        #{rawJS juryCode}
    }
  };

  socket.onerror = function (e) {
    console.log("WebSocket Error: " + error);
  };

  socket.onclose = function() {
    console.log("socket closed");
    console.log("try to restart socket soon");
    setTimeout(init,3000);
  };
}

function showJury () {
  overlayOn();
  renderJury();
  setTimeout(overlayOff, 5000);
}

function renderJury() {
  let lifter           = juryLifter;
  let cards            = juryCards;

  if (lifter == undefined || cards == undefined)
    return;

  //set lifter info
  let h1               = document.getElementById('juryh1');
  let h2               = document.getElementById('juryh2');
  h1.innerHTML         = lifter[0]; //Name
  h1.innerHTML        += " - ";
  h1.innerHTML        += lifter[5]; //Gewicht
  h1.innerHTML        += "Kg - ";
  h1.innerHTML        += lifter[2] + " "; //Disziplin
  h1.innerHTML        += lifter[4]; //Versuch
  h1.innerHTML        += ". Versuch";
  h2.innerHTML         = lifter[1]; //Verein

  let circleSizeRel    = 0.3;

  let karisRot         = [cards[0][0], cards[1][0], cards[2][0]];
  let karisBlue        = [cards[0][1], cards[1][1], cards[2][1]];
  let karisYellow      = [cards[0][2], cards[1][2], cards[2][2]];

  let canvas           = document.getElementById("juryCanvas");
  let c                = canvas.getContext('2d');
  canvas.width         = 0.9 * window.innerWidth;
  let juryHeaderBRect  = document.getElementById('juryHeader').getBoundingClientRect();
  canvas.height        = 0.9*(window.innerHeight - (juryHeaderBRect.bottom - juryHeaderBRect.top)) // 0.9 * window.innerHeight;

  let width            = canvas.width;
  let height           = canvas.height;

  let maxCircleX       = width*circleSizeRel;
  let maxCircleY       = height*0.85;
  let circleSize       = maxCircleX < maxCircleY ? maxCircleX : maxCircleY;

  let circleRad        = (circleSize / 2);
  let horizontalSpace  = ( (width - 3*circleSize)/4 );

  let totalHeight      = 0.1*height + circleSize;
  //Redefine canvas height
  canvas.height        = totalHeight;
  height               = canvas.height;

  for (let i = 0; i<3; ++i) {
    let isInvalid = karisRot[i] || karisBlue[i] || karisYellow[i];
    let color = isInvalid ? 'rgb(255,0,0)' : 'rgb(255,255,255)';
    let offset = horizontalSpace + 2*circleRad;
    let xpos = horizontalSpace + circleRad + i*offset;
    let ypos = circleRad;
    c.fillStyle = color;
    //draw Primary Lights
    c.beginPath();
    c.arc(xpos, ypos, circleRad, 0, 2*Math.PI);
    c.closePath();
    c.fill();

    //below the primary lights draw the cards
    cardWidth = circleSize/3;
    offset    = 0;
    if (karisRot[i]) {
      color = 'rgb(255,0,0)'
      c.fillStyle = color;
      c.fillRect(xpos-circleRad+offset, ypos+circleRad+0.01*height, cardWidth, 0.09*height);
    }
    offset += cardWidth;
    if (karisBlue[i]) {
      color = 'rgb(0,0,255)'
      c.fillStyle = color;
      c.fillRect(xpos-circleRad+offset, ypos+circleRad+0.01*height, cardWidth, 0.09*height);
    }
    offset += cardWidth;
    if (karisYellow[i]) {
      color = 'rgb(255,255,0)'
      c.fillStyle = color;
      c.fillRect(xpos-circleRad+offset, ypos+circleRad+0.01*height, cardWidth, 0.09*height);
    }
  }
}


/** Aktualisiert die Anzeige der naechsten Lifter */
function showNextLifters(lifterArr) {

  // alle alten Zeilen loeschen
  $(".lifterRow").remove();

  currentAttempt = 99;

  lifterArr.forEach(elem => {
    lifter = getNextLifterJson(elem);

    if (currentAttempt > lifter.AttemptNumber) currentAttempt = lifter.AttemptNumber;

    // Neue Zeile hinzufuegen
    var $newRow = $("#nextLifterRowBase").clone().removeClass("invisible").removeAttr("id").addClass("lifterRow");
    $newRow[0].children[0].innerText = lifter.Name;
    $newRow[0].children[1].innerText = lifter.AttemptWeight;
    $newRow[0].children[2].innerText = lifter.AttemptNumber;

    $newRow.appendTo("#nextLifterTableBody");

  });
}

/** Erstellt einen JSON-Lifter aus der Array-Darstellung */
function getNextLifterJson(lifter) {
  var lifterJson = {};
  lifterJson.Name = lifter[0];
  lifterJson.AttemptWeight = lifter[1];
  lifterJson.AttemptNumber = lifter[2];
  return lifterJson;
}

/** Aufbau des Arrays:
 * arr[i] -> Gruppe i
 * arr[i][0] -> Tupel: (isNextLifter, Lifter)
 */
function showRanking(arr) {

  $(".generated").remove();

  for(let gi = 0; gi < arr.length; gi++) {
    let group = arr[gi];
    if(group.length > 0) printGroupInfo(group[0][1]);

    //lege neue Tabelle an
    var $newTable = $("#groupTableBase").clone().removeClass("invisible").removeAttr("id").addClass("generated");

    var $rowBase = $("#rowBase").clone().removeClass("invisible").removeAttr("id");


    for(let li = 0; li < group.length; li++) {
      let isNext = group[li][0];
      let lifter = group[li][1];
      let total = group[li][2];

      let $newRow = $rowBase.clone();

      let addRow = cell => cell.addClass("divTableCell").appendTo($newRow);
      let extractWeight = val => {
        switch(val.statusCode)
        {
          case "unset": return "";
          case "skip": return "Skip";
          default: return val.weight;
        }
      }
      let colorize = (success, cell) => {
        switch(success)
        {
          case "success": cell.addClass("liftGood"); break;
          case "fail": cell.addClass("liftFail"); break;
          case "skip": cell.addClass("liftSkip"); break;
          default: break;
        }
        return cell;
      };

      let showTotal = (tot, cell) => {
        if (tot == "D.Q.")
          cell.addClass("liftSkip");
        return cell;
      };

      let highlightFirst = cell => {if(isNext) cell.addClass("firstRow"); return cell;};

      let rowElements = [
      highlightFirst($(`<div> ${lifter.name} </div>`)),
      $(`<div> ${lifter.group} </div>`),
      ];

      for(let disciplineIndex = 0; disciplineIndex < lifter.results.length; disciplineIndex++)
      {
        let disc = allDisciplines[disciplineIndex];
        let attempt1 = lifter.results[disciplineIndex][1].att1;
        rowElements.push(colorize(attempt1.statusCode, $(`<div class="discCell${disc}">${extractWeight(attempt1)} </div>`)));
        let attempt2 = lifter.results[disciplineIndex][1].att2;
        rowElements.push(colorize(attempt2.statusCode, $(`<div class="discCell${disc}">${extractWeight(attempt2)} </div>`)));
        let attempt3 = lifter.results[disciplineIndex][1].att3;
        rowElements.push(colorize(attempt3.statusCode, $(`<div class="discCell${disc}">${extractWeight(attempt3)} </div>`)));
      }

      rowElements = rowElements.concat(
        [
          showTotal(total, $(`<div>${total} </div>`)),
          $(`<div> ${lifter.club} </div>`)
        ]
      )

      rowElements.forEach(elem => addRow(elem));

      $newRow.appendTo($newTable);
    }

    $("#divGroupOverview").append($newTable);
  }
}

// aktualisiert die Disziplinscheckboxen wenn im Adminpanel die Disziplin geaendert wird
function updateCheckboxes(currentDiscipline, disciplinesArr) {
  if(currentDiscipline == lastDiscipline) return;

  disciplinesArr.forEach(d => {
    let $checkbox = $("#check" + d);
    $checkbox.prop('checked', d == currentDiscipline);
  })
  lastDiscipline = currentDiscipline;

  showSelectedDisciplines();
}

/** Extrahiert aus dem ersten Lifter einer Gruppe die Gruppeninfo und gibt
 * diese als Ueberschrift aus;
 */
function printGroupInfo(l){
  let sex = l.sex == "Male" ? "Männer" : "Frauen";
  let raw = l.raw ? "Ohne Ausrüstung" : "Mit Ausrüstung";
  let getAgeclass = ageclass => {
    switch(ageclass) {
      case "Open": return "Aktive";
      case "Junior": return "Junioren";
      case "Subjunior": return "Jugend";
      case "Master1": return "Senioren 1";
      case "Master2": return "Senioren 2";
      case "Master3": return "Senioren 3";
      case "Master4": return "Senioren 4";
      default: return ageclass;
    }
  }
  let $heading = $(`<h4>${getAgeclass(l.ageclass)} | ${sex} | ${raw} | ${l.weightclass} </h4>`).addClass("generated");
  $("#divGroupOverview").append($heading);
}

function overlayOn () {
  document.getElementById("juryOverlay").style.display = "block";
}

function overlayOff () {
  document.getElementById("juryOverlay").style.display = "none";
}

$('#divGroupSelector :checkbox').change(function() {
  showSelectedDisciplines();
});

// Zeigt nur die ausgewaehlten Disziplinen an
function showSelectedDisciplines() {

  allDisciplines.forEach(d => {
    let checkboxChecked = $("#check" + d).prop("checked");
    let $discHeads = $(".discHead" + d);
    let $discCells = $(".discCell" + d);
    checkboxChecked ? $discHeads.show() : $discHeads.hide();
    checkboxChecked ? $discCells.show() : $discCells.hide();
  });

}

window.addEventListener('resize', renderJury, false);
